{"version":3,"sources":["snowball-ajax.js"],"names":["jQuery","document","ready","$","retrieveBlocks","parseBlock","orderNumber","blockForm","type","closest","data","selector","inputs","find","block","blockType","each","index","element","dataTarget","attr","inputValue","val","is","snowballBlock","customCss","retrieveCustomCss","blocks","push","retrieveRenderedPage","html","newHTML","contents","remove","code","cm","length","editor","CodeMirror","readOnlyMark","getAllMarks","getValue","mark","lastReadOnlyLine","lines","fromLine","line","ch","toLine","lastLine","getRange","click","blocksRetrieved","articleRetrieved","blocks_data","action","post_id","ajax_object","snowball_ajax_nonce","article_data","article","post","ajax_url"],"mappings":"AAAAA,OAAOC,UAAUC,MAAM,SAASC,GA8B9B,QAASC,KAKP,QAASC,GAAWC,EAAaC,GAC/B,GAAIC,GAAOL,EAAEI,GAAWE,QAAQ,mBAAmBC,KAAK,QACpDC,EAAW,oQACXC,EAAST,EAAEI,GAAWM,KAAKF,EAE/B,IAAIC,EAAQ,CACV,GAAIE,IACFC,UAAWP,EACXF,YAAaA,EAGfM,GAAOI,KAAK,SAASC,EAAOC,GAC1B,GAAIC,GAAahB,EAAEe,GAASE,KAAK,eAC7BC,EAAalB,EAAEe,GAASI,KAEG,aAA3BnB,EAAEe,GAASE,KAAK,UAClBC,EAAalB,EAAEe,GAASK,GAAG,aAAc,GAAO,GAGlDT,EAAMK,GAAcE,GAGtB,IAAIG,GAAgBrB,EAAEI,GAAWE,QAAQ,kBACzCK,GAAMW,UAAYC,EAAkBF,GACpCG,EAAOC,KAAKd,IA5BhB,GAAIa,KAgCJ,OA9BAxB,GAAE,uBAAuBa,KAAKX,GA8BvBsB,EAGT,QAASE,KACP,GAAIC,GAAO,EAUX,OATA9B,QAAO,qBAAqBgB,KAAK,SAASC,EAAOC,GAC/C,GAAIa,GAAU/B,OAAOkB,GAASc,WAAWnB,KAAK,OAG9CkB,GAAQlB,KAAK,OAAOoB,SAEpBH,EAAOA,EAAO,KAAOC,EAAQD,SAGxBA,EAKT,QAASJ,GAAkBZ,GACzB,GACIoB,GADAC,EAAKhC,EAAEW,GAAOD,KAAK,6BAGvB,IAAkB,IAAdsB,EAAGC,OACLF,EAAO/B,EAAEW,GAAOD,KAAK,6BAA6BiB,WAC7C,CACL,GAAIO,GAASF,EAAG,GAAGG,WACfC,EAAeF,EAAOG,aAG1B,IAFAN,EAAOG,EAAOI,WAEVF,EAAaH,OAAQ,CACvB,GAAIM,GAAOH,EAAa,GACpBI,EAAmBD,EAAKE,MAAMR,MAElC,IAAuB,EAAnBO,EACFT,EAAOG,EAAOI,eACT,CACL,GAAII,IAAYC,KAAKH,EAAiB,EAAGI,GAAG,GACxCC,GAAUF,KAAKT,EAAOY,WAAW,EAAGF,GAAG,EAC3Cb,GAAOG,EAAOa,SAASL,EAAUG,KAKvC,MAAOd,GA1GT/B,EAAE,wBAAwBgD,MAAM,WAC9B,GAAIC,GAAkBhD,IAClBiD,EAAmBxB,IAEnByB,GACFC,OAAU,aACV5B,OAAUyB,EACVI,QAAWC,YAAYD,QACvBE,oBAAuBD,YAAYC,qBAGjCC,GACFJ,OAAU,cACVK,QAAWP,EACXG,QAAWC,YAAYD,QACvBE,oBAAuBD,YAAYC,oBAIrCvD,GAAE0D,KAAKJ,YAAYK,SAAUH,GAG7BxD,EAAE0D,KAAKJ,YAAYK,SAAUR","file":"snowball-ajax.min.js","sourcesContent":["jQuery(document).ready(function($) {\n  $(\"#publish, #save-post\").click(function() {\n    var blocksRetrieved = retrieveBlocks();\n    var articleRetrieved = retrieveRenderedPage();\n\n    var blocks_data = {\n      \"action\": \"add_blocks\",\n      \"blocks\": blocksRetrieved,\n      \"post_id\": ajax_object.post_id,\n      \"snowball_ajax_nonce\": ajax_object.snowball_ajax_nonce\n    };\n\n    var article_data = {\n      \"action\": \"add_article\",\n      \"article\": articleRetrieved,\n      \"post_id\": ajax_object.post_id,\n      \"snowball_ajax_nonce\": ajax_object.snowball_ajax_nonce\n    };\n\n    // adding article to db\n    $.post(ajax_object.ajax_url, article_data);\n\n    // adding blocks data to db\n    $.post(ajax_object.ajax_url, blocks_data);\n  });\n\n  /* \n    This function will traverse through all the html in all the blocks\n    and retrieve all the data about the block the user added.\n  */\n  function retrieveBlocks() {\n    var blocks = [];\n\n    $(\"#snowball-main form\").each(parseBlock);\n\n    function parseBlock(orderNumber, blockForm) {\n      var type = $(blockForm).closest(\".snowball-block\").data(\"type\");\n      var selector = \"input[type='text'][data-target], input[type='email'][data-target], input[type='range'][data-target], input[type='hidden'][data-target], input[type='radio'][data-target]:checked, input[type='checkbox'][data-target], textarea[data-target], select[data-target]\";\n      var inputs = $(blockForm).find(selector);\n\n      if (inputs) {\n        var block = {\n          blockType: type,\n          orderNumber: orderNumber\n        };\n        // element is a tag with an attribute called data-target\n        inputs.each(function(index, element) {\n          var dataTarget = $(element).attr(\"data-target\");\n          var inputValue = $(element).val();\n\n          if ($(element).attr(\"type\") == \"checkbox\") {\n            inputValue = $(element).is(\":checked\") ? true : false;\n          }\n\n          block[dataTarget] = inputValue;\n        });\n\n        var snowballBlock = $(blockForm).closest('.snowball-block');\n        block.customCss = retrieveCustomCss(snowballBlock);\n        blocks.push(block);\n      }\n    }\n\n    return blocks;\n  }\n\n  function retrieveRenderedPage() {\n    var html = '';\n    jQuery(\".snowball-preview\").each(function(index, element) {\n      var newHTML = jQuery(element).contents().find(\"body\");\n\n      // filter out svg code, which chokes the db\n      newHTML.find(\"svg\").remove();\n\n      html = html + \"\\n\" + newHTML.html();\n    });\n\n    return html;\n  }\n\n  // this is the same function on\n  // retrieveNonReadOnlyText except it has block as an argument.\n  function retrieveCustomCss(block) {\n    var cm = $(block).find(\".snowball-code .CodeMirror\");\n    var code;\n\n    if (cm.length === 0) {\n      code = $(block).find(\"textarea[data-mode='css']\").html();\n    } else {\n      var editor = cm[1].CodeMirror;\n      var readOnlyMark = editor.getAllMarks();\n      code = editor.getValue();\n\n      if (readOnlyMark.length) {\n        var mark = readOnlyMark[0];\n        var lastReadOnlyLine = mark.lines.length;\n\n        if (lastReadOnlyLine < 2) {\n          code = editor.getValue();\n        } else {\n          var fromLine = {line:lastReadOnlyLine-1, ch:0};\n          var toLine = {line:editor.lastLine()+1, ch:0};\n          code = editor.getRange(fromLine, toLine);\n        }\n      }\n    }\n\n    return code;\n  }\n});\n"],"sourceRoot":"/source/"}